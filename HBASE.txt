What is HBase?
HBase is an open-source, column-oriented distributed database system in a Hadoop environment. Initially, it was Google Big Table, afterward, it was re-named as HBase and is primarily written in Java.  Apache HBase is needed for real-time Big Data applications.

HBase can store massive amounts of data from terabytes to petabytes. The tables present in HBase consists of billions of rows having millions of columns. HBase is built for low latency operations, which is having some specific features compared to traditional relational models.

HBase Unique Features

HBase is used extensively for random read and write operations
HBase stores a large amount of data in terms of tables
Provides linear and modular scalability over cluster environment
Strictly consistent to read and write operations
Automatic and configurable sharding of tables
Automatic failover supports between Region Servers
Easy to use Java API for client access


A table for a popular web application may consist of billions of rows. If we want to search particular row from such a huge amount of data, HBase is the ideal choice as query fetch time in less. Most of the online analytics applications use HBase.

Traditional relational data models fail to meet performance requirements of very big databases. These performance and processing limitations can be overcome by Apache HBase.

Importance of NoSQL Databases in Hadoop
In big data analytics, Hadoop plays a vital role in solving typical business problems by managing large data sets and gives the best solutions in analytics domain.

In the Hadoop ecosystem, each component plays its unique role for the

Data processing
Data validation
Data storing
In terms of storing unstructured, semi-structured data storage as well as retrieval of such data's, relational databases are less useful. Also, fetching results by applying query on huge data sets that are stored in Hadoop storage is a challenging task. NoSQL storage technologies provide the best solution for faster querying on huge datasets.

Other NoSQL storage type Databases
Some of the NoSQL models present in the market are Cassandra, MongoDB, and CouchDB. Each of these models has different ways of storage mechanism.

For example, MongoDB is a document-oriented database from the NoSQL family tree. Compared to traditional databases it provides the best features in terms of performance, availability, and scalability. It is an open source document-oriented database, and it's written in C++.

Cassandra is also a distributed database from open source Apache software which is designed to handle a huge amount of data stored across commodity servers. Cassandra provides high availability with no single point of failure.

While CouchDB is a document-oriented database in which each document fields are stored in key-value maps.

How HBase different from other NoSQL model
HBase storage model is different from other NoSQL models discussed above. This can be stated as follow

HBase stores data in the form of key/value pairs in a columnar model. In this model, all the columns are grouped together as Column families
HBase provides a flexible data model and low latency access to small amounts of data stored in large data sets
HBase on top of Hadoop will increase the throughput and performance of distributed cluster set up. In turn, it provides faster random reads and writes operations.

Quick overcap of HBase -

HBase uses Hadoop files as storage system to store the large amounts of data. Hbase consists of Master Servers and Regions Servers
The data that is going to store in HBase will be in the form of regions. Further, these regions will be split up and stored in multiple region servers
This shell commands allows the programmer to define table schemas and data operations using complete shell mode interaction
Whichever command we use, it's going to reflect in HBase data model
We use HBase shell commands in operating system script interpreters like Bash shell
Bash shell is the default command interpreters for most of Linux and Unix operating distributions
HBase advanced versions provides shell commands jruby-style object oriented references for tables
Table reference variables can be used to perform data operations in HBase shell mode
----------------------------------------------------------------
Installation of HBASE
------------------------------------------
$wget http://archive.apache.org/dist/hbase/1.1.1/hbase-1.1.1-bin.tar.gz

$tar -xvf hbase-1.1.1-bin.tar.gz

 $ sudo mkdir /usr/local/hbase-1

sudo chown -R hduser /usr/local/hbase-1

$ mv hbase-1.1.1 /usr/local/hbase-1/

Open your hbase-1/conf/hbase-env.sh and set the path to the java installed in your system
---------------------------------------------------------------------------------------------------
 nano /usr/local/hbase-1/hbase-1.1.1/conf/hbase-env.sh
-------------------------------------------------------------------------------------------------------
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-i386
-------------------------------------------------------------------------------
nano ~/.bashrc

export HBASE_HOME=/usr/local/hbase-1/hbase-1.1.1
export PATH=$PATH:$HBASE_HOME/bin

source ~/.bashrc
----------------------------------------------------------------------------------------
  nano /usr/local/hbase-1/hbase-1.1.1/conf/hbase-site.xml 
==============================================
<configuration>  
  <property>
<name>hbase.rootdir</name>
<value>hdfs://localhost:50070/hbase</value>  
</property>

<property>
<name>hbase.master.port</name> 
<value>60010</value>
</property>

<property>
<name>hbase.cluster.distributed</name>
<value>true</value>
</property>

<property>
<name>hbase.zookeeper.quorum</name>
<value>localhost</value>
</property>

<property>
    <name>hbase.zookeeper.property.dataDir</name>
    <value>/home/hduser/hbase-1.3.1/zookeeper</value>
</property>

<property>
<name>hbase.zookeeper.property.maxClientCnxns</name>
<value>35</value>
</property>
</configuration>  
---------------------------------------------------------------
$cd /usr/local/hbase-1/hbase-1.1.1/bin  
$./start-hbase.sh  
-----------------------------------------------------------------------------
https://www.guru99.com/hbase-shell-general-commands.html
-----------------------------------------------------------------
1)hbase shell
2)status
3)status 'simple'
4)status 'summary'
5)status 'detailed'
6)version
7)create 'emp', 'personal data', 'professional data'
8)list
put ’<table name>’,’row1’,’<colfamily:colname>’,’<value>’
9)put 'emp','1','personal data:name','raju'
10)put 'emp','1','personal data:city','hyderabad'
11) put 'emp','1','professional data:designation','manager'
12)put 'emp','1','professional data:salary','50000'
13)scan 'emp'
------------------------------------------------------------------------------------------------