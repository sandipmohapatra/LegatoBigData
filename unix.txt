Linux is an open-source operating system. 
Unix is also an operating system like Linux. It is an commercial OS. 

It consists of three parts: Kernal, Shell and Programs. 

In the simple language Linux is an operating system (OS). We all are familiar with other operating systems like Microsoft windows, Apple Mac OS, iOS, Google android, etc, just like them linux is also an operating system.


Structure Of Linux Operating System
Linux OS has following components:

1) Kernel
kernel is the core of the operating system. It establishes communication between devices and software.

 Basically it has four responsibilities:

device management: A system has many devices connected to it like CPU, memory device, sound cards, graphic cards, etc. A kernel stores all the data related to all the devices in device driver.

Memory management: Another function that kernel has to manage is the memory management. Kernel keeps a track of used and unused memory and make sure that processes shouldn't manipulate data of each other using virtual memory address.

Process management: In process management kernel assign enough time and gives priorities to processes before handling CPU to other process. It also deals with security and ownership information.

Handling system calls: Handling system calls means a programmer can write a query or ask the kernel to perform a task.

2) System Libraries
System libraries are special programs that helps in accessing the kernel's features. It is used to perform any task.

3) System Tools
Linux OS has a set of utility tools. With the help of commands you can access your files, edit and manipulate data in your directories or files, change location of files or anything.

4) Development Tools
The additional tools and libraries are written by the programmers to produce a working application is known as development tools.

5) End User Tools
These end tools make a system unique for a user. End tools are not required for the operating system but are necessary for a user.

Some examples of end tools are graphic design tools, office suites, browsers, multimedia players, etc.
-----------------------------------------------
to create directory
mkdir <directory name>
-------------------------------------------
to change directory
cd <directory name>
---------------------------------------------
to come out of the directory
cd ..
----------------------------------------
to create a file
vi <filename>
to insert data
press insert 
to save and exit 
esc :wq
--------------------------------------
to view the data
cat <filename>
-----------------------------------
to view the list of files and directory present under a directory
ls - l
---------------------------------------------
https://github.com/sandipmohapatra/LegatoBigData
------------------------------------------------
cat file1 file2 > files Combine file1 and file2 into files 
------------------------------------------------------------------
cat file1 >> file2 Append file1 at the end of file2 
--------------------------------------------------------------------------
chmod [options] mode files

Change the access mode of one or more files. 
Only the owner or privileged user may change its mode. 
Create mode by concatenating who, opcode and  permission.
who (u­ user)(g­group)(o­other)(a­all) opcode (+ add permission)
(­remove permission)(= assign permission, and  remove from the not assigned) permission (r or 4 – read)(w or 2 – write)(x or 1 – execute)

Examples: chmod u+x file (add permission to the user to execute the file) chmod 751 file (chmod u=rwx, g=rx, o=x file) 

-----------------------------------------------
cmp file1 file2 Compare two files (0­identical)(1­different)(2­inaccessible) 
----------------------------------------------------------
-----------------
clear:- clear the terminal display 

date :- to view the date

time :- to view the time

cmp file1 file2 :- Compare two files (0­identical)(1­different)(2­inaccessible)

10)ls [options] [names] 

­a     list all files, including the hidden . files. -d     list only directory information, not its contents. Used with ­l. h     human readable, using abbreviations for kilobyte, megabyte, etc. k     size in kilobytes l     long format list (includes permissions, owner, size, modification time, etc). r     list files in reverse order (by name or by time). R    recursively list subdirectories. s      list size in blocks (1block = 512 KB) t     list files according to modification time (newest first) u    list files according to the file access time.
--------------------------








